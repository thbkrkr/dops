#!/bin/bash
#
# Create a VM with Docker Machine using the OpenStack driver.
#
set -euo pipefail

DM=docker-machine

usage() {
cat <<-EOF
  Usage: create-openstack-vm [-c <api_creds_path>] [-s <storage_path>] [-n <name>] [-f <flavour>] [-i <image>] [-y]

  Create a VM with Docker Machine and the OpenStack driver.

  A file ~/.creds-openrc.sh must exists with the OpenStack variables:
    export OS_AUTH_URL=https://auth.cloud.ovh.net/v2.0
    export OS_TENANT_ID=1234567890
    export OS_TENANT_NAME="0987654321"
    export OS_USERNAME="AzErTyUiO"
    export OS_PASSWORD="QsDfGhJkLmMn"
    export OS_REGION_NAME"ABC"

  OpenStack API Creds path and Docker machine Storage path can be set with env
  variables \$OS_API_CREDS_PATH and \$MACHINE_STORAGE_PATH or [-c <api_creds_path>] 
  and [-s <storage_path>].

  OPTIONS:
  ========
      -n <name>     Name of the VM            (default: node-[0-9]*)
      -f <flavor>   Flavor                    (default: vps-ssd-1)
      -i <image>    OS Image                  (default: Debian 8)
      -y            No prompt

      -c            OpenStack API Creds path      (default: \$OS_API_CREDS_PATH or ~/.creds-openrc.sh)
      -s            Docker machine Storage path   (default: \$MACHINE_STORAGE_PATH or ~/.docker/machine)

      -h            Print this help
EOF
}

random_word() {
  echo "node-$RANDOM"
}

main() {
  local name= flavor= imageName= netName= sshUser= prompt=1

  while getopts n:f:i:yc:s:h arg 2>/dev/null
  do
    case $arg in
        n) name=$OPTARG ;;
        f) flavor=$OPTARG ;;
        i) imageName=$OPTARG ;;
        y) prompt=0 ;;
        c) credsPath=$OPTARG;;
        s) storagePath=$OPTARG;;
        ?|h) usage && exit 2 ;;
    esac
  done

  # Default values
  set +u
  OS_API_CREDS_PATH=${OS_API_CREDS_PATH:-~/.creds-openrc.sh}
  MACHINE_STORAGE_PATH=${MACHINE_STORAGE_PATH:-~/.docker/machine}
  set -u
  
  name=${name:-$(random_word)}
  flavor=${flavor:-vps-ssd-1}
  imageName=${imageName:-"Debian 8"}
  netName=Ext-Net
  sshUser=admin
  credsPath=${credsPath:-"$OS_API_CREDS_PATH"}
  storagePath=${storagePath:-"$MACHINE_STORAGE_PATH"}

  # Source creds variables to communicate with the OpenStack API
  [ ! -f $credsPath ] && echo "[error] $credsPath file not found" && exit 1
  eval "$(cat $credsPath)"

  echo '{"message":"create-openstack-vm","name":"'$name'","flavor":"'$flavor'","image":"'$imageName'"}'

  print_create_vm_cmd() {
    echo $DM --storage-path="$storagePath"\
      create -d openstack \
      --openstack-flavor-name="$flavor" \
      --openstack-image-name="\"$imageName\"" \
      --openstack-net-name="$netName" \
      --openstack-ssh-user="$sshUser" \
      $name
  }
  create_vm_cmd() {
    touch /tmp/.create-openstack-vm_$name
    $DM --storage-path="$storagePath" \
      create -d openstack \
      --openstack-flavor-name="$flavor" \
      --openstack-image-name="$imageName" \
      --openstack-net-name="$netName" \
      --openstack-ssh-user="$sshUser" \
      $name
    touch /tmp/.create-openstack-vm_$name
    echo "[OK] VM $name created"
  }

  # Prompt and print create_vm_cmd or execute directly create_vm_cmd
  if [ $prompt -eq 1 ]; then
    print_create_vm_cmd
    read -p "Press [Yy] to continue... " yn
    case $yn in
        [Yy]* ) create_vm_cmd ;;
        *     ) exit 0 ;;
    esac
  else
    create_vm_cmd
  fi
}

main "$@"
