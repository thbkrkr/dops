#!/bin/bash
#
# Small docker-compose wrapper that uses environment variables to setup the Docker daemon variables
# and the docker-compose.yml to use.
#
set -euo pipefail

source utils.sh

COMPOSE_DIR=$WORKDIR/compose

DEFAULT_CMD="up -d --x-smart-recreate --allow-insecure-ssl"
COMPOSE_OPT=""

usage() {
  echo ""
  echo " Usage: compose <command>"
  echo ""
  echo "    <command>   Docker compose command (default: $DEFAULT_CMD). See compose -h."
  echo ""
  echo "  ENVIRONMENT VARIABLES: "
  echo "  ====================== "
  echo "    NAME     Name of the docker compose project and the YAML file if FILE is not set" 
  echo "    FILE     Name of the docker compose YAML file"
  echo "    MACHINE  Name of the machine (used to set DOCKER_TLS_VERIFY, DOCKER_HOST and"
  echo "             DOCKER_CERT_PATH from the Docker Machine directory"
  echo ""
  echo "  EXAMPLES: "
  echo "  ========= "
  echo "    NAME=app compose <command>                   => docker-compose -p app -f app.yml"
  echo "    FILE=stack.yml compose <command>             => docker-compose stack.yml"
  echo "    NAME=app FILE=stack.yml compose <command>    => docker-compose -p app -f stack.yml"
  echo ""
  echo "  # Compose files:"
  ls -1 $COMPOSE_DIR | sed -e "s/^/  -> /" -e "s/.yml//"
  echo ""
  echo "  # Machines:"
  ls -1 $MACHINES_DIR | sed -e "s/^/  -> /"
  echo ""
}

set_compose_opt() {
  local name=${NAME:-""}
  local file=${FILE:-""}

  if [ ! -z $name ]; then
    COMPOSE_OPT="-p $NAME"
    # If FILE is not defined use NAME.yml
    file=${FILE:-$NAME.yml}
  fi

  if [ ! -z $file ]; then
    COMPOSE_OPT="$COMPOSE_OPT -f $COMPOSE_DIR/$file"
  else
    file="docker-compose.yml"
    COMPOSE_OPT="$COMPOSE_OPT -f $COMPOSE_DIR/$file"
  fi

  [ ! -f $COMPOSE_DIR/$file ] \
    && error compose "No file: $COMPOSE_DIR/$file" \
    || return 0
}

set_notif() {
  HIPCHAT_TOKEN=${HIPCHAT_TOKEN:-no}
  HIPCHAT_ROOM=${HIPCHAT_ROOM:-ops}
  SLACK_TOKEN=${SLACK_TOKEN:-no}
  SLACK_ROOM=${SLACK_ROOM:-ops}
}

format_log() {
  local file=$1
  local log="$(cat $file | sed -e "s/\s*$//")"
  [ ! -z "$log" ] \
    && echo "<br>$log" \
    || echo ""
}

notif() {
  local status=$1
  local action="$2"
  local name="$3"

  local title=""
  local more=""
  local color=""
  local message=""

  case $status in
    0)
      title="$action <b>SUCCESS</b>"
      color="green"
      bashColor="\e[0;32m"
      more="$(format_log $output)"
      ;;
    *)
      title="$action <b>FAILURE</b>"
      color="red"
      bashColor="\e[0;31m"
      more="$(format_log $error)"
      ;;
  esac

  message="$title - $name $more"

  if [[ "$HIPCHAT_TOKEN" != "no" ]]; then
    echo " @-> Send HipChat notification: $message to $HIPCHAT_ROOM"
    curl -sk \
      -H "Authorization: Bearer $HIPCHAT_TOKEN" \
      -H "Content-type: application/json" \
      "https://api.hipchat.com/v2/room/$HIPCHAT_ROOM/notification" -d '
      {
        "date": '$(date +%s)',
        "color": "'$color'",
        "message": "'"$message"'",
        "notify": true
      }'
    case $status in
      1) exit 1 ;;
    esac
  elif [[ "$SLACK_TOKEN" != "no" ]]; then
    echo "TODO"
  else
    EOC="\e[0m"
echo -e ' --> Notification:
{'$bashColor'
  "date": '$(date +%s)',
  "color": "'$color'",
  "message": "'"$message"'",
  "notify": true
'$EOC'}
    '
  fi
}

error="/tmp/error"
output="/tmp/output"

main() {

  case "$@" in
    -h|usage) usage && exit 2 ;;
  esac
  
  set_machine
  set_notif
  
  [ -z $MACHINE ] \
    && error compose 'Neither variable $MACHINE or nor $DOCKER_CERT_PATH set'
  
  case "$@" in
    bash) bash ;;
    "")
      set_compose_opt
      cmd="$DEFAULT_CMD" ;;
    *)
      set_compose_opt
      cmd="$@" ;;
  esac
  
  echo " --> [machine=$MACHINE] docker-compose $COMPOSE_OPT $cmd"
  set +e
  docker-compose $COMPOSE_OPT $cmd #2> $error 2> $output
  status_code=$?
  set -e

  NAME=${NAME:-"--"}
  notif $status_code "compose" "name=$NAME machine=$MACHINE cmd=$cmd"
}

main "$@"
